name: Haskell CI

on:
  push:
    branches: '**'
  pull_request:
    branches-ignore: '**'

# INFO: The following configuration block ensures that only one build runs per branch,
# which may be desirable for projects with a costly build process.
# Remove this block from the CI workflow to let each CI job run to completion.
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

# It must match to the version in the preinstalled tools (TODO: get it dynamically?)
# https://github.com/actions/runner-images
env:
  cabal-version: '3.14.2.0'

jobs:
  build:
    name: Build (GHC ${{ matrix.ghc-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        ghc-version: ['9.8.4']

        # include:
        #   - os: windows-latest
        #     ghc-version: '9.8'
        #   - os: macos-latest
        #     ghc-version: '9.8'

    steps:
      - name: Inspect 1
        run: |
          whoami
          hostname
          pwd
          echo "$HOME"
          find /usr/local/.ghcup

      - name: Inspect 2
        run: |
          find ~/.ghcup

      - uses: actions/checkout@v4

      # ------------------------------------------------------------
      # Setup GHC
      # ------------------------------------------------------------
      # TODO: Separate setup-verify and verify from build and test, merge build and test

      # Preinstalled tools will be ignored on GHC cache
      - name: Record preinstalled tools
        run: |
          : > /tmp/ghc-cache-ignore
          find ~/.ghcup/bin >> /tmp/ghc-cache-ignore
          cat /tmp/ghc-cache-ignore

      - name: Restore GHC ${{ matrix.ghc-version }}
        uses: actions/cache/restore@v4
        id: ghc-cache
        with:
          path: /tmp/ghc-cache
          key: GHC-${{ runner.os }}-ghc-${{ matrix.ghc-version }}

      - name: Distribute GHC ${{ matrix.ghc-version }}
        if: steps.ghc-cache.outputs.cache-hit == 'true'
        run: |
          find /tmp/ghc-cache
          for f in $(ls /tmp/ghc-cache/bin/*) ; do mv "$f" /usr/local/.ghcup/bin/
          mkdir -p /usr/local/.ghcup/ghc/${{ matrix.ghc-version }}
          mv /tmp/ghc-cache/ghc/${{ matrix.ghc-version }}/bin /usr/local/.ghcup/ghc/${{ matrix.ghc-version }}/bin

          echo 'after distrubuting..'
          find /usr/local/.ghcup/bin
          find /usr/local/.ghcup/ghc/${{ matrix.ghc-version }}
          export PATH=/usr/local/.ghcup/ghc/${{ matrix.ghc-version }}/bin:"$PATH"
          ghc --version
          cabal update

      - name: Download GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2
        if: steps.ghc-cache.outputs.cache-hit != 'true'
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ env.cabal-version }}

      - name: Collect GHC cache files
        if: steps.ghc-cache.outputs.cache-hit != 'true'
        run: |
          mkdir /tmp/ghc-cache
          mkdir /tmp/ghc-cache/bin # ~/.ghcup/bin
          for f in $(find ~/.ghcup/bin -type f | grep -vxF -f /tmp/ghc-cache-ignore) ; do cp "$f" /tmp/ghc-cache/bin ; done
          mkdir -p /tmp/ghc-cache/ghc/${{ matrix.ghc-version }}/
          cp -r /usr/local/.ghcup/ghc/${{ matrix.ghc-version }}/bin /tmp/ghc-cache/ghc/${{ matrix.ghc-version}}/
          find /tmp/ghc-cache

      - name: Save GHC cache
        uses: actions/cache/save@v4
        if: steps.ghc-cache.outputs.cache-hit != 'true'
        with:
          path: /tmp/ghc-cache
          key: ${{ steps.ghc-cache.outputs.cache-primary-key }}

      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build all --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: deps-cache
        env:
          key: ${{ runner.os }}-ghc-${{ matrix.ghc-version }}-cabal-${{ env.cabal-version }}
        with:
          path: ~/.cabal/store
          key: dist-${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      - name: Save dependency cache
        uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.deps-cache.outputs.cache-hit != 'true'
        with:
          path: ~/.cabal/store
          key: ${{ steps.deps-cache.outputs.cache-primary-key }}

      # Make build cache of `ac-library-hs` for this run
      - name: Build ac-library-hs
        run: cabal build lib:ac-library-hs

      - name: Save cached ac-library-hs
        uses: actions/cache/save@v4
        env:
          key: ${{ runner.os }}-ghc-${{ matrix.ghc-version }}-cabal-${{ env.cabal-version }}
        with:
          path: dist-newstyle
          key: ac-library-hs-${{ github.run_id }}-${{ env.key }}

  test:
    needs: build
    name: Test (GHC ${{ matrix.ghc-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    # TODO: DRY
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        ghc-version: ['9.8.4']

        # include:
        #   - os: windows-latest
        #     ghc-version: '9.8'
        #   - os: macos-latest
        #     ghc-version: '9.8'
    steps:
      # ------------------------------------------------------------
      # Setup Haskell (TODO: move to a separate composite action file)
      # ------------------------------------------------------------
      - uses: actions/checkout@v4

      - name: Restore GHC ${{ matrix.ghc-version }}
        uses: actions/cache/restore@v4
        id: ghc-cache
        with:
          path: /tmp/ghc-cache
          # TODO: use hash for caching
          key: GHC-${{ runner.os }}-ghc-${{ matrix.ghc-version }}

      - name: Distribute GHC ${{ matrix.ghc-version }}
        if: steps.ghc-cache.outputs.cache-hit == 'true'
        run: |
          find /tmp/ghc-cache
          for f in $(ls /tmp/ghc-cache/bin/*) ; do mv "$f" /usr/local/.ghcup/bin/
          mkdir -p /usr/local/.ghcup/ghc/${{ matrix.ghc-version }}
          mv /tmp/ghc-cache/ghc/${{ matrix.ghc-version }}/bin /usr/local/.ghcup/ghc/${{ matrix.ghc-version }}/bin

          echo 'after distrubuting..'
          find /usr/local/.ghcup/bin
          find /usr/local/.ghcup/ghc/${{ matrix.ghc-version }}
          export PATH=/usr/local/.ghcup/ghc/${{ matrix.ghc-version }}/bin:"$PATH"
          ghc --version
          cabal update

      - name: Download GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2
        if: steps.ghc-cache.outputs.cache-hit != 'true'
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ env.cabal-version }}

      - name: Restore cached dependencies from the `build` job
        uses: actions/cache/restore@v4
        id: deps-cache
        env:
          key: ${{ runner.os }}-ghc-${{ matrix.ghc-version }}-cabal-${{ env.cabal-version }}
        with:
          path: ~/.cabal/store
          key: dist-${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Restore cached `ac-lbrary-hs` from the `build` job
        uses: actions/cache/restore@v4
        id: lib-cache
        env:
          key: ${{ runner.os }}-ghc-${{ matrix.ghc-version }}-cabal-${{ env.cabal-version }}
        with:
          path: dist-newstyle
          key: ac-library-hs-${{ github.run_id }}-${{ env.key }}

      # ------------------------------------------------------------
      # Run tests
      # ------------------------------------------------------------
      - name: Build check
        # make sure to build all the components in `ac-library-hs.cabal` (TODO: automate this)
        run: |
          cabal build ac-library-hs
          cabal build ac-library-hs:example-lazy-segtree
          cabal build ac-library-hs:ac-library-hs-benchmark

      - name: Run tests
        run: cabal test all

      - name: Run doctest
        run: |
          cabal install doctest
          cabal repl --with-ghc=doctest --repl-options='-w -Wdefault'

      - name: Check cabal file
        run: cabal check

      # - name: Build documentation
      #   run:
      #     cabal haddock all --disable-documentation
      #     # --disable-documentation disables building documentation for dependencies.
      #     # The package's own documentation is still built,
      #     # yet contains no links to the documentation of the dependencies.

  # Run oj-verify in 20 tasks
  verify:
    needs: build
    name: Verify (GHC 9.8.4 on ubuntu-latest)
    runs-on: ubuntu-latest
    env:
      ghc-version: '9.8.4'
    strategy:
      fail-fast: false
      matrix:
        parallel-index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

    steps:
      # ------------------------------------------------------------
      # Setup Haskell (TODO: move to a separate composite action file)
      # ------------------------------------------------------------
      - uses: actions/checkout@v4

      - name: Restore GHC ${{ env.ghc-version }}
        uses: actions/cache/restore@v4
        id: ghc-cache
        with:
          path: /tmp/ghc-cache
          key: GHC-${{ runner.os }}-ghc-${{ env.ghc-version }}

      - name: Distribute GHC ${{ env.ghc-version }}
        if: steps.ghc-cache.outputs.cache-hit == 'true'
        run: |
          find /tmp/ghc-cache
          for f in $(ls /tmp/ghc-cache/bin/*) ; do mv "$f" /usr/local/.ghcup/bin/
          mkdir -p /usr/local/.ghcup/ghc/${{ env.ghc-version }}
          mv /tmp/ghc-cache/ghc/${{ env.ghc-version }}/bin /usr/local/.ghcup/ghc/${{ env.ghc-version }}/bin

          echo 'after distrubuting..'
          find /usr/local/.ghcup/bin
          find /usr/local/.ghcup/ghc/${{ env.ghc-version }}
          export PATH=/usr/local/.ghcup/ghc/${{ env.ghc-version }}/bin:"$PATH"
          ghc --version
          cabal update

      - name: Download GHC ${{ env.ghc-version }}
        uses: haskell-actions/setup@v2
        if: steps.ghc-cache.outputs.cache-hit != 'true'
        id: setup
        with:
          ghc-version: ${{ env.ghc-version }}
          cabal-version: ${{ env.cabal-version }}

      - name: Restore cached dependencies from the `build` job
        uses: actions/cache/restore@v4
        id: deps-cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ~/.cabal/store
          key: dist-${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Restore cached `ac-lbrary-hs` from the `build` job
        uses: actions/cache/restore@v4
        id: lib-cache
        env:
          key: ${{ runner.os }}-ghc-${{ env.ghc-version }}-cabal-${{ env.cabal-version }}
        with:
          path: dist-newstyle
          key: ac-library-hs-${{ github.run_id }}-${{ env.key }}

      # ------------------------------------------------------------
      # Run verification test
      # ------------------------------------------------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install oj-verify
        run: pip3 install -U online-judge-verify-helper

      # TODO: cache `~/.cache/online-judge-tools/library-checker-problems/`
      # TODO: cache `.verify-helper/cache/`

      - name: Run oj-verify
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
        #   GH_PAT: ${{ secrets.GH_PAT }}
        working-directory: verify
        run: |
          files="$(find app/ -type f | awk 'NR % 20 == ${{ matrix.parallel-index }}')"
          echo 'target files:'
          for f in $files ; do
            echo "- $f"
          done
          oj-verify run $files --tle 15 -j $(nproc)
